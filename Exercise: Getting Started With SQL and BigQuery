{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dae3fa2c",
   "metadata": {
    "papermill": {
     "duration": 0.005715,
     "end_time": "2024-09-15T10:32:41.677760",
     "exception": false,
     "start_time": "2024-09-15T10:32:41.672045",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/getting-started-with-sql-and-bigquery).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a9dba6b",
   "metadata": {
    "papermill": {
     "duration": 0.004777,
     "end_time": "2024-09-15T10:32:41.687773",
     "exception": false,
     "start_time": "2024-09-15T10:32:41.682996",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "The first test of your new data exploration skills uses data describing crime in the city of Chicago.\n",
    "\n",
    "Before you get started, run the following cell. It sets up the automated feedback system to review your answers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2deceb98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:41.699377Z",
     "iopub.status.busy": "2024-09-15T10:32:41.698976Z",
     "iopub.status.idle": "2024-09-15T10:32:48.322938Z",
     "shell.execute_reply": "2024-09-15T10:32:48.321745Z"
    },
    "papermill": {
     "duration": 6.632496,
     "end_time": "2024-09-15T10:32:48.325235",
     "exception": false,
     "start_time": "2024-09-15T10:32:41.692739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n",
      "Setup Complete\n"
     ]
    }
   ],
   "source": [
    "# Set up feedack system\n",
    "from learntools.core import binder\n",
    "binder.bind(globals())\n",
    "from learntools.sql.ex1 import *\n",
    "print(\"Setup Complete\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6657bbaf",
   "metadata": {
    "papermill": {
     "duration": 0.004995,
     "end_time": "2024-09-15T10:32:48.335810",
     "exception": false,
     "start_time": "2024-09-15T10:32:48.330815",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Use the next code cell to fetch the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e543e8a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:48.348662Z",
     "iopub.status.busy": "2024-09-15T10:32:48.347569Z",
     "iopub.status.idle": "2024-09-15T10:32:49.442743Z",
     "shell.execute_reply": "2024-09-15T10:32:49.441513Z"
    },
    "papermill": {
     "duration": 1.104599,
     "end_time": "2024-09-15T10:32:49.445587",
     "exception": false,
     "start_time": "2024-09-15T10:32:48.340988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using Kaggle's public dataset BigQuery integration.\n"
     ]
    }
   ],
   "source": [
    "from google.cloud import bigquery\n",
    "\n",
    "# Create a \"Client\" object\n",
    "client = bigquery.Client()\n",
    "\n",
    "# Construct a reference to the \"chicago_crime\" dataset\n",
    "dataset_ref = client.dataset(\"chicago_crime\", project=\"bigquery-public-data\")\n",
    "\n",
    "# API request - fetch the dataset\n",
    "dataset = client.get_dataset(dataset_ref)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96ddd42d",
   "metadata": {
    "papermill": {
     "duration": 0.005119,
     "end_time": "2024-09-15T10:32:49.456449",
     "exception": false,
     "start_time": "2024-09-15T10:32:49.451330",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises\n",
    "\n",
    "### 1) Count tables in the dataset\n",
    "\n",
    "How many tables are in the Chicago Crime dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad62ee98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:49.468827Z",
     "iopub.status.busy": "2024-09-15T10:32:49.468444Z",
     "iopub.status.idle": "2024-09-15T10:32:50.427690Z",
     "shell.execute_reply": "2024-09-15T10:32:50.426576Z"
    },
    "papermill": {
     "duration": 0.96831,
     "end_time": "2024-09-15T10:32:50.430221",
     "exception": false,
     "start_time": "2024-09-15T10:32:49.461911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "crime\n"
     ]
    }
   ],
   "source": [
    "# Write the code you need here to figure out the answer\n",
    "tabels=list(client.list_tables(dataset))\n",
    "for tabel in tabels:\n",
    "    print(tabel.table_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eb5a2525",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:50.442962Z",
     "iopub.status.busy": "2024-09-15T10:32:50.442540Z",
     "iopub.status.idle": "2024-09-15T10:32:50.453138Z",
     "shell.execute_reply": "2024-09-15T10:32:50.452112Z"
    },
    "papermill": {
     "duration": 0.019598,
     "end_time": "2024-09-15T10:32:50.455385",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.435787",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_CountTables\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_tables = 1  # Store the answer as num_tables and then run this cell\n",
    "\n",
    "# Check your answer\n",
    "q_1.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2becd94d",
   "metadata": {
    "papermill": {
     "duration": 0.005367,
     "end_time": "2024-09-15T10:32:50.466430",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.461063",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For a hint or the solution, uncomment the appropriate line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3e081e5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:50.479276Z",
     "iopub.status.busy": "2024-09-15T10:32:50.478874Z",
     "iopub.status.idle": "2024-09-15T10:32:50.487090Z",
     "shell.execute_reply": "2024-09-15T10:32:50.485953Z"
    },
    "papermill": {
     "duration": 0.017124,
     "end_time": "2024-09-15T10:32:50.489267",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.472143",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 1, \"questionId\": \"1_CountTables\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#3366cc\">Hint:</span> Use the `list_tables()` method to get a list of the tables in the dataset."
      ],
      "text/plain": [
       "Hint: Use the `list_tables()` method to get a list of the tables in the dataset."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "q_1.hint()\n",
    "#q_1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd39442f",
   "metadata": {
    "papermill": {
     "duration": 0.005854,
     "end_time": "2024-09-15T10:32:50.500966",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.495112",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 2) Explore the table schema\n",
    "\n",
    "How many columns in the `crime` table have `TIMESTAMP` data?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46d25af0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:50.514495Z",
     "iopub.status.busy": "2024-09-15T10:32:50.513742Z",
     "iopub.status.idle": "2024-09-15T10:32:50.926825Z",
     "shell.execute_reply": "2024-09-15T10:32:50.925775Z"
    },
    "papermill": {
     "duration": 0.42259,
     "end_time": "2024-09-15T10:32:50.929400",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.506810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Write the code to figure out the answer\n",
    "table_ref=dataset_ref.table(\"crime\")\n",
    "table=client.get_table(table_ref)\n",
    "a=table.schema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f63f145",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:50.943432Z",
     "iopub.status.busy": "2024-09-15T10:32:50.942451Z",
     "iopub.status.idle": "2024-09-15T10:32:50.951055Z",
     "shell.execute_reply": "2024-09-15T10:32:50.950062Z"
    },
    "papermill": {
     "duration": 0.017918,
     "end_time": "2024-09-15T10:32:50.953222",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.935304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_CountTimestampFields\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_timestamp_fields = 2 # Put your answer here\n",
    "\n",
    "# Check your answer\n",
    "q_2.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4987ea51",
   "metadata": {
    "papermill": {
     "duration": 0.005792,
     "end_time": "2024-09-15T10:32:50.965248",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.959456",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For a hint or the solution, uncomment the appropriate line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "13996aed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:50.978940Z",
     "iopub.status.busy": "2024-09-15T10:32:50.978486Z",
     "iopub.status.idle": "2024-09-15T10:32:50.982879Z",
     "shell.execute_reply": "2024-09-15T10:32:50.981796Z"
    },
    "papermill": {
     "duration": 0.013948,
     "end_time": "2024-09-15T10:32:50.985198",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.971250",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q_2.hint()\n",
    "#q_2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1edb6a61",
   "metadata": {
    "papermill": {
     "duration": 0.006208,
     "end_time": "2024-09-15T10:32:50.997554",
     "exception": false,
     "start_time": "2024-09-15T10:32:50.991346",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3) Create a crime map\n",
    "\n",
    "If you wanted to create a map with a dot at the location of each crime, what are the names of the two fields you likely need to pull out of the `crime` table to plot the crimes on a map?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ee3a5d0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:51.012050Z",
     "iopub.status.busy": "2024-09-15T10:32:51.011618Z",
     "iopub.status.idle": "2024-09-15T10:32:52.132002Z",
     "shell.execute_reply": "2024-09-15T10:32:52.130755Z"
    },
    "papermill": {
     "duration": 1.130638,
     "end_time": "2024-09-15T10:32:52.134446",
     "exception": false,
     "start_time": "2024-09-15T10:32:51.003808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>unique_key</th>\n",
       "      <th>case_number</th>\n",
       "      <th>date</th>\n",
       "      <th>block</th>\n",
       "      <th>iucr</th>\n",
       "      <th>primary_type</th>\n",
       "      <th>description</th>\n",
       "      <th>location_description</th>\n",
       "      <th>arrest</th>\n",
       "      <th>domestic</th>\n",
       "      <th>...</th>\n",
       "      <th>ward</th>\n",
       "      <th>community_area</th>\n",
       "      <th>fbi_code</th>\n",
       "      <th>x_coordinate</th>\n",
       "      <th>y_coordinate</th>\n",
       "      <th>year</th>\n",
       "      <th>updated_on</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>location</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11647156</td>\n",
       "      <td>JC214800</td>\n",
       "      <td>2019-04-07 02:45:00+00:00</td>\n",
       "      <td>0000X W LAKE ST</td>\n",
       "      <td>0291</td>\n",
       "      <td>CRIM SEXUAL ASSAULT</td>\n",
       "      <td>ATTEMPT NON-AGGRAVATED</td>\n",
       "      <td>SIDEWALK</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>32</td>\n",
       "      <td>02</td>\n",
       "      <td>1176122.0</td>\n",
       "      <td>1901745.0</td>\n",
       "      <td>2019</td>\n",
       "      <td>2019-04-14 16:04:11+00:00</td>\n",
       "      <td>41.885750</td>\n",
       "      <td>-87.628697</td>\n",
       "      <td>(41.88575001, -87.628696601)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9299473</td>\n",
       "      <td>HW444327</td>\n",
       "      <td>2013-09-09 10:15:00+00:00</td>\n",
       "      <td>002XX N STATE ST</td>\n",
       "      <td>0312</td>\n",
       "      <td>ROBBERY</td>\n",
       "      <td>ARMED:KNIFE/CUTTING INSTRUMENT</td>\n",
       "      <td>STREET</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>1176327.0</td>\n",
       "      <td>1901797.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>2018-02-10 15:50:01+00:00</td>\n",
       "      <td>41.885888</td>\n",
       "      <td>-87.627942</td>\n",
       "      <td>(41.885888079, -87.627942238)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10991175</td>\n",
       "      <td>JA317634</td>\n",
       "      <td>2017-06-19 23:00:00+00:00</td>\n",
       "      <td>002XX N STATE ST</td>\n",
       "      <td>0313</td>\n",
       "      <td>ROBBERY</td>\n",
       "      <td>ARMED: OTHER DANGEROUS WEAPON</td>\n",
       "      <td>CTA TRAIN</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>1176327.0</td>\n",
       "      <td>1901797.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>2018-02-10 15:50:01+00:00</td>\n",
       "      <td>41.885888</td>\n",
       "      <td>-87.627942</td>\n",
       "      <td>(41.885888079, -87.627942238)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10768811</td>\n",
       "      <td>HZ533943</td>\n",
       "      <td>2016-11-29 20:17:00+00:00</td>\n",
       "      <td>0000X E WACKER DR</td>\n",
       "      <td>031A</td>\n",
       "      <td>ROBBERY</td>\n",
       "      <td>ARMED: HANDGUN</td>\n",
       "      <td>SIDEWALK</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>1176621.0</td>\n",
       "      <td>1902155.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>2018-02-10 15:50:01+00:00</td>\n",
       "      <td>41.886864</td>\n",
       "      <td>-87.626852</td>\n",
       "      <td>(41.886863814, -87.626851797)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7472544</td>\n",
       "      <td>HS274480</td>\n",
       "      <td>2010-04-24 21:35:00+00:00</td>\n",
       "      <td>0000X N FRANKLIN ST</td>\n",
       "      <td>031A</td>\n",
       "      <td>ROBBERY</td>\n",
       "      <td>ARMED: HANDGUN</td>\n",
       "      <td>SIDEWALK</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>42</td>\n",
       "      <td>32</td>\n",
       "      <td>03</td>\n",
       "      <td>1174325.0</td>\n",
       "      <td>1900637.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>2018-02-10 15:50:01+00:00</td>\n",
       "      <td>41.882750</td>\n",
       "      <td>-87.635329</td>\n",
       "      <td>(41.882749892, -87.63532858)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   unique_key case_number                      date                block  \\\n",
       "0    11647156    JC214800 2019-04-07 02:45:00+00:00      0000X W LAKE ST   \n",
       "1     9299473    HW444327 2013-09-09 10:15:00+00:00     002XX N STATE ST   \n",
       "2    10991175    JA317634 2017-06-19 23:00:00+00:00     002XX N STATE ST   \n",
       "3    10768811    HZ533943 2016-11-29 20:17:00+00:00    0000X E WACKER DR   \n",
       "4     7472544    HS274480 2010-04-24 21:35:00+00:00  0000X N FRANKLIN ST   \n",
       "\n",
       "   iucr         primary_type                     description  \\\n",
       "0  0291  CRIM SEXUAL ASSAULT          ATTEMPT NON-AGGRAVATED   \n",
       "1  0312              ROBBERY  ARMED:KNIFE/CUTTING INSTRUMENT   \n",
       "2  0313              ROBBERY   ARMED: OTHER DANGEROUS WEAPON   \n",
       "3  031A              ROBBERY                  ARMED: HANDGUN   \n",
       "4  031A              ROBBERY                  ARMED: HANDGUN   \n",
       "\n",
       "  location_description  arrest  domestic  ...  ward  community_area  fbi_code  \\\n",
       "0             SIDEWALK   False     False  ...    42              32        02   \n",
       "1               STREET   False     False  ...    42              32        03   \n",
       "2            CTA TRAIN   False     False  ...    42              32        03   \n",
       "3             SIDEWALK   False     False  ...    42              32        03   \n",
       "4             SIDEWALK    True     False  ...    42              32        03   \n",
       "\n",
       "   x_coordinate y_coordinate  year                updated_on   latitude  \\\n",
       "0     1176122.0    1901745.0  2019 2019-04-14 16:04:11+00:00  41.885750   \n",
       "1     1176327.0    1901797.0  2013 2018-02-10 15:50:01+00:00  41.885888   \n",
       "2     1176327.0    1901797.0  2017 2018-02-10 15:50:01+00:00  41.885888   \n",
       "3     1176621.0    1902155.0  2016 2018-02-10 15:50:01+00:00  41.886864   \n",
       "4     1174325.0    1900637.0  2010 2018-02-10 15:50:01+00:00  41.882750   \n",
       "\n",
       "   longitude                       location  \n",
       "0 -87.628697   (41.88575001, -87.628696601)  \n",
       "1 -87.627942  (41.885888079, -87.627942238)  \n",
       "2 -87.627942  (41.885888079, -87.627942238)  \n",
       "3 -87.626852  (41.886863814, -87.626851797)  \n",
       "4 -87.635329   (41.882749892, -87.63532858)  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write the code here to explore the data so you can find the answer\n",
    "client.list_rows(table,max_results=5).to_dataframe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7590685",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:52.149588Z",
     "iopub.status.busy": "2024-09-15T10:32:52.149176Z",
     "iopub.status.idle": "2024-09-15T10:32:52.158361Z",
     "shell.execute_reply": "2024-09-15T10:32:52.157232Z"
    },
    "papermill": {
     "duration": 0.019374,
     "end_time": "2024-09-15T10:32:52.160550",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.141176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.3333333333333333, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_IdentifyFieldsForPlotting\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fields_for_plotting = [\"latitude\" , \"longitude\"] # Put your answers here\n",
    "\n",
    "# Check your answer\n",
    "q_3.check()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "885d1ea7",
   "metadata": {
    "papermill": {
     "duration": 0.006612,
     "end_time": "2024-09-15T10:32:52.174281",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.167669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For a hint or the solution, uncomment the appropriate line below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4227c3f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:52.189856Z",
     "iopub.status.busy": "2024-09-15T10:32:52.189446Z",
     "iopub.status.idle": "2024-09-15T10:32:52.198491Z",
     "shell.execute_reply": "2024-09-15T10:32:52.197394Z"
    },
    "papermill": {
     "duration": 0.019874,
     "end_time": "2024-09-15T10:32:52.200885",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.181011",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"3_IdentifyFieldsForPlotting\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc99\">Solution:</span> \n",
       "```python\n",
       "fields_for_plotting = ['latitude', 'longitude']\n",
       "```"
      ],
      "text/plain": [
       "Solution: \n",
       "```python\n",
       "fields_for_plotting = ['latitude', 'longitude']\n",
       "```"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#q_3.hint()\n",
    "q_3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1f5e836",
   "metadata": {
    "papermill": {
     "duration": 0.006671,
     "end_time": "2024-09-15T10:32:52.214539",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.207868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Thinking about the question above, there are a few columns that appear to have geographic data. Look at a few values (with the `list_rows()` command) to see if you can determine their relationship.  Two columns will still be hard to interpret. But it should be obvious how the `location` column relates to `latitude` and `longitude`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fc8ec7e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T10:32:52.230188Z",
     "iopub.status.busy": "2024-09-15T10:32:52.229779Z",
     "iopub.status.idle": "2024-09-15T10:32:52.234690Z",
     "shell.execute_reply": "2024-09-15T10:32:52.233473Z"
    },
    "papermill": {
     "duration": 0.015544,
     "end_time": "2024-09-15T10:32:52.237036",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.221492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Scratch space for your code"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1677416a",
   "metadata": {
    "papermill": {
     "duration": 0.006669,
     "end_time": "2024-09-15T10:32:52.250915",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.244246",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep going\n",
    "\n",
    "You've looked at the schema, but you haven't yet done anything exciting with the data itself. Things get more interesting when you get to the data, so keep going to **[write your first SQL query](https://www.kaggle.com/dansbecker/select-from-where).**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b83382b",
   "metadata": {
    "papermill": {
     "duration": 0.006791,
     "end_time": "2024-09-15T10:32:52.264614",
     "exception": false,
     "start_time": "2024-09-15T10:32:52.257823",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 22090,
     "sourceId": 28376,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6057,
     "sourceId": 285982,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13.94892,
   "end_time": "2024-09-15T10:32:52.992452",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-15T10:32:39.043532",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
